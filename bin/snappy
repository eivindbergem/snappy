#!/usr/bin/env python

# Copyright 2018 Eivind Alexander Bergem <eivind.bergem@gmail.com>
# This file is part of snappy.

# snappy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# snappy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with snappy.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime
from pathlib import Path
from functools import wraps

from tqdm import tqdm
import click

from snappy.snapshot import (create_snapshot, list_snapshots, changes,
                             remove_snapshot, load_snapshot, referenced_objects,
                             wipe_snapshots, NoSuchSnapshot)
from snappy.storage import (list_objects, remove_object, snappy_dir)
from snappy import snappy_init

TIME_STR = '%Y-%m-%d %H:%M:%S'

def assert_init(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        path = snappy_dir()

        if not path.exists():
            print("No snappy found in {}".format(path))
            print("Run `snappy init` to set up.")

            return -1
        else:
            return fn(*args, **kwargs)

    return wrapper

@click.group()
def cli():
    pass

@cli.command()
def init():
    snappy_init()

@cli.command()
@assert_init
def ls():
    for timestamp, path in list_snapshots():
        dt = datetime.fromtimestamp(timestamp)
        print("{} - {}".format(path.name, dt.strftime(TIME_STR)))

@cli.command()
@assert_init
def snapshot():
    print(create_snapshot())

@cli.command()
@assert_init
def diff():
    print("Changes since last snapshot:\n")
    for path, state in changes():
        print("\t{:10} - {}".format(state, path))

@cli.command()
@click.argument("snapshot")
def wipe(snapshot):
    if click.confirm('Delete all snapshots leading up to {}'.format(snapshot)):
        try:
            wipe_snapshots(snapshot)
        except NoSuchSnapshot:
            print("Error: Snapshot not found!")

@cli.command()
@click.argument('snapshots', nargs=-1)
@click.option("--preceding", "-p", is_flag=True,
              help="remove preceeding snapshots")
@assert_init
def rm(snapshots):
    for snapshot in snapshots:
        print("Removing {}...".format(snapshot))

        try:
            remove_snapshot(snapshot)
        except FileNotFoundError:
            pass

@cli.command()
@click.argument('snapshot')
@assert_init
def tree(snapshot):
    print(load_snapshot(snapshot))

@cli.command()
@click.option("--dry-run", "-d", is_flag=True)
@assert_init
def clean(dry_run):
    unreferenced =  set(list_objects()) - referenced_objects()
    print("Found {} unreferenced objects".format(len(unreferenced)))

    if not dry_run and unreferenced:
        print("Removing objects...")
        for obj in tqdm(unreferenced):
            remove_object(obj)

@cli.command()
@click.argument("snapshot")
@click.argument("dst", type=click.Path())
@click.option("--soft", "-s", is_flag=True, help="Create symbolic links")
@assert_init
def link(snapshot, dst, soft):
    print("Linking {} to {}...".format(snapshot, dst))
    load_snapshot(snapshot).link(Path(dst), soft)

@cli.command()
@click.argument("snapshot")
@click.argument("dst", required=False, type=click.Path())
@assert_init
def checkout(snapshot, dst):
    modified = list(changes())

    if modified and not dst:
        print("You have unsaved changes in working dir. "
              "Please make snapshot before checking out.")
        return -1

    if dst:
        dst = Path(dst)
        unlink = False

        if dst.exists():
            print("Error: Path '{}' already exists!".format(dst))
            return -1
    else:
        unlink = True

    load_snapshot(snapshot).checkout(dst, unlink)

if __name__ == '__main__':
    cli()
